dnl This is the kernel configure.in file.
dnl Process this file with autoconf to produce a configure script.

AC_INIT(tinker, [0.1.0])
AC_MSG_NOTICE([<<< Running configure for $PACKAGE_NAME version $PACKAGE_VERSION >>>])

dnl Probably works with much older, but tested at this one
AC_PREREQ([2.59])

TINKER_AM_PREREQ
AC_CONFIG_AUX_DIR(.)

AC_CONFIG_SUBDIRS([src bsp])

dnl Autoheader stuff
AH_TOP(
/*      --- MACHINE GENERATED FILE. MUST *NOT* BE CHANGED MANUALLY! ---      */
#ifndef tinker_config_h
#define tinker_config_h

/* Include well known constants used in this file and which are needed for
 * macro evaluation */
#include <tinker/_defines.h>
/*===========================================================================*/
)
AH_BOTTOM(
/*===========================================================================*/
/* Avoid user-space naming conflicts */
#define TK_PACKAGE_BUGREPORT	PACKAGE_BUGREPORT
#define TK_PACKAGE_NAME		PACKAGE_NAME
#define TK_PACKAGE_STRING	PACKAGE_STRING
#define TK_PACKAGE_TARNAME	PACKAGE_TARNAME

/* The following include undefines some conflicting macros (needed to fool
 * autoconf) */
#include <tinker/config_undef.h>

#endif /* tinker_config_h */
)

dnl Create defines we expect configure or sub-configure scripts to set (will
dnl end up in config.h)

dnl Analyzed build system defines (set by TinKer configure option(s))
AH_TEMPLATE([TK_CANONICAL_HOST],
   [Canonical hostname])
AH_TEMPLATE([TK_ALIAS_HOST],
   [As CANONICAL_HOST but without expansion, i.e. exactly as typed when configured])
AH_TEMPLATE([TK_XCOMPILE],
   [If cross-compile build is expected])
AH_TEMPLATE([TK_ARCH],
   [Which main CPU architecture])
AH_TEMPLATE([__TK_ARCH_up__],
   [Which main CPU architecture - un-prefixed version])
AH_TEMPLATE([TK_SYSTEM],
   [Defines the executing system])
AH_TEMPLATE([__TK_SYSTEM_up__],
   [Defines which system (i.e. system call API) we're using - un-prefixed version])
AH_TEMPLATE([TK_ABI],
   [Calling convention])
AH_TEMPLATE([__TK_ABI_up__],
   [Calling convention - un-prefixed version])
AH_TEMPLATE([TK_TOOLDIR],
   [Where the PREFIX directory is])
AH_TEMPLATE([TK_MULTI_ARCH_TARGET],
   [Name of multi-architecture target system (if any)])
AH_TEMPLATE([TK_MULTI_ARCH_INCLUDES],
   [CHAINPATH to arch-specific headers (if any)])
AH_TEMPLATE([TK_GCC_VERSION],
   [Version of GCC that compiled tinker])
AH_TEMPLATE([TK_TINKER_PATH],
   [Source path of TinKer (as it were when built)])

dnl Selectable build system defines
AH_TEMPLATE([TK_BOARD],
   [Name of the board directory (i.e. BSP adaption)])
AH_TEMPLATE([__TK_BOARD_up__],
   [Name of the board directory (i.e. BSP adaption)  - un-prefixed version])
AH_TEMPLATE([TK_DCPU],
   [Specific CPU variant (i.e. -m option used)])
AH_TEMPLATE([__TK_DCPU_up__],
   [Specific CPU variant (i.e. -m option used) - un-prefixed version])


dnl TinKer tuning defines
AH_TEMPLATE([TK_MINIMUM_STACK_SIZE],
   [Maximum size of a stack for a thread. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_ROOT_STACK_SIZE],
   [Root stack size. If not set, it should generate a build error])
AH_TEMPLATE([TK_NORMAL_STACK_SIZE],
   [Stacksize used when stack-size is omitted. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_THREADS],
   [Maximum number of threds your system could have. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_PRIO_LEVELS],
   [Number of priorities for you system (recommended 3 or 16). If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_THREADS_AT_PRIO],
   [Number of threads that can be scheduled at each priority. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_THREAD_NAME_LEN],
   [Lengts of the string in TCB that holds the name of the thread. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_BLOCKED_ON_Q],
   [Maximum nuber of threads blocked on any ITC primitive (not only Q). If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_NUM_Q],
   [Maximum number of any ITC primitive (not only Q). If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_KMEM_NHEAPS],
   [Maximum number of heaps to be managed by the KMEM component])

dnl TinKer components defines
AH_TEMPLATE([TK_COMP_ITC],
   [Comp. ITC - Inter thread communication component enabled])
AH_TEMPLATE([TK_COMP_PTIMER],
   [Comp. PTIMER - Preemptive timer component enabled])
AH_TEMPLATE([TK_COMP_KMEM],
   [Comp. KMEM - Kernel memory manager component enabled ])
AH_TEMPLATE([TK_COMP_PTHREAD],
   [Comp. PTHRED - POSIX 1003.1c threads component enabled])
AH_TEMPLATE([TK_COMP_POSIX_RT],
   [Comp. POSIX_RT - POSIX 1003.1b queues, semaphores component enabled])
AH_TEMPLATE([TK_COMP_FILESYS],
   [Comp. FILESYS - Embedded files-ystem component enabled])

dnl TinKer package tuning defines
AH_TEMPLATE([TK_USE_BUILTIN_SORT],
   [Pack. - Use builtin search/sort function (overrides default for target)])
AH_TEMPLATE([TK_USE_EMRGCY_CONSOLE],
   [Pack. - Emergency console is claimed to be available - _tk_assert will use it])


dnl Build features
AH_TEMPLATE([TK_CPLUSPLUS],
   [If library was built using a C++ compiler])
AH_TEMPLATE([TK_HOSTED],
   [Configured and built in a way that means hosted execution
   (auto-deducted)])

dnl Canonical extras
AH_TEMPLATE([CANON_BUILD_CPU],
   [Canonical info: BUILD_CPU])
AH_TEMPLATE([CANON_BUILD_VENDOR],
   [Canonical info: BUILD_VENDOR])
AH_TEMPLATE([CANON_BUILD_OS],
   [Canonical info: BUILD_OS])
AH_TEMPLATE([CANON_HOST_CPU],
   [Canonical info: HOST_CPU])
AH_TEMPLATE([CANON_HOST_VENDOR],
   [Canonical info: HOST_VENDOR])
AH_TEMPLATE([CANON_HOST_OS],
   [Canonical info: HOST_OS])
AH_TEMPLATE([CANON_TARGET_CPU],
   [Canonical info: TARGET_CPU])
AH_TEMPLATE([CANON_TARGET_VENDOR],
   [Canonical info: TARGET_VENDOR])
AH_TEMPLATE([CANON_TARGET_OS],
   [Canonical info: TARGET_OS])

dnl Other features
AH_TEMPLATE([TK_DISPATCH],
   [Main type of dispatching (MIXED or EXCLUSIVE).])

dnl Low level porting (advanced)
AH_TEMPLATE([TK_HOWTO_MALLOC],
   [Advanced primary porting])
AH_TEMPLATE([TK_HOWTO_CLOCK],
   [Advanced primary porting])
AH_TEMPLATE([TK_HOWTO_PRINTK],
   [Advanced primary porting])
AH_TEMPLATE([TK_HOWTO_ASSERT],
   [Advanced primary porting])

TINKER_CONFIGURE(.)
dnl AC_INCLUDES_DEFAULT ([HAVE_UINTPTR_T]) GAH! How to use this??

dnl TINKER_CANONICAL_EXTRA
AC_CONFIG_HEADER(include/tinker/config.h)

ALL_C=$sources_c
AC_SUBST(ALL_C)

dnl Read Makefile.in and config.h.in, Write Makefile and config.h
AC_OUTPUT(Makefile-gnu)
