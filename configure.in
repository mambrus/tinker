dnl This is the kernel configure.in file.
dnl Process this file with autoconf to produce a configure script.

AC_INIT(tinker, [0.1.0])
AC_MSG_NOTICE([<<< Running configure for $PACKAGE_NAME version $PACKAGE_VERSION >>>])

dnl Probably works with much older, but tested at this one
AC_PREREQ([2.59])

TINKER_AM_PREREQ
AC_CONFIG_AUX_DIR(.)

AC_CONFIG_SUBDIRS([bsp])
#Sources are deducted based on components configuration. The line below is now set further down.
#sources_c="src/tk.c src/tk_itc.c src/tk_sysqueues.c"

dnl Autoheader stuff
AH_TOP(
#ifndef tinker_config_h
#define tinker_config_h

// Please do not refere to __tk_yes or __tk_no in your application directly. 
// They are only here because the buildsystem requires it.
#define __tk_no 0
#define __tk_yes 1

)
AH_BOTTOM(
//Avoid userspace naming conflicts
#define TK_PACKAGE_BUGREPORT	PACKAGE_BUGREPORT
#define TK_PACKAGE_NAME		PACKAGE_NAME
#define TK_PACKAGE_STRING	PACKAGE_STRING
#define TK_PACKAGE_TARNAME	PACKAGE_TARNAME

//The following include undefines some conflicting macros (needed to fool aotoconf)
#include <tinker/config_undef.h>


#endif //tinker_config_h
)

dnl Create defines we expect configure or sub-configure scripts to set (will end up in config.h)
dnl Analyzed build system defines (by any TinKer configure options)
AH_TEMPLATE([TK_CANONICAL_HOST],
   [Canonical hostname])
AH_TEMPLATE([TK_ALIAS_HOST],
   [As CANONICAL_HOST but without expansion, i.e. exactly as typed when configured])
AH_TEMPLATE([TK_XCOMPILE],
   [If cross-compile build is expected])
AH_TEMPLATE([TK_ARCH],
   [Which main CPU architecture])
AH_TEMPLATE([TK_SYSTEM],
   [Defines which system (i.e. system call API) we're using])
AH_TEMPLATE([TK_ABI],
   [Calling convention])
AH_TEMPLATE([TK_TOOLDIR],
   [Where the PREFIX directory is])
AH_TEMPLATE([TK_GCC_VERSION],
   [Version of GCC that compiled tinker])
AH_TEMPLATE([TK_TINKER_PATH],
   [Source path of TinKer (as it were when built)])

dnl Selectable build system defines
AH_TEMPLATE([TK_BOARD],
   [Name of the board directory (i.e. BSP adaption)])
AH_TEMPLATE([TK_DCPU],
   [Specific CPU variant (i.e. -m option used)])


dnl TinKer tuning defines
AH_TEMPLATE([TK_MINIMUM_STACK_SIZE],
   [Maximum size of a stack for a thread. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_NORMAL_STACK_SIZE],
   [Stacksize used when stack-size is omitted. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_THREADS],
   [Maximum number of threds your system could have. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_PRIO_LEVELS],
   [Numer of priorities for you system (recomended 3 or 16). If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_THREADS_AT_PRIO],
   [Number of threads that can be sceduled at each priority. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_THREAD_NAME_LEN],
   [Lengts of the string in TCB that holds the name of the thread. If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_BLOCKED_ON_Q],
   [Maximum nuber of threads blocked on any ITC primitive (not only Q). If not set, value in tk_tuning.h will be used instead])
AH_TEMPLATE([TK_MAX_NUM_Q],
   [Maximum number of any ITC primitive (not only Q). If not set, value in tk_tuning.h will be used instead])

dnl TinKer components defines
AH_TEMPLATE([TK_COMP_ITC],
   [Comp. ITC - Inter thread communication component enabled])
AH_TEMPLATE([TK_COMP_PTIMER],
   [Comp. PTIMER - Preemptive timer component enabled])
AH_TEMPLATE([TK_COMP_KMEM],
   [Comp. KMEM - Kernel memory manager component enabled ])
AH_TEMPLATE([TK_COMP_PTHREAD],
   [Comp. PTHRED - POSIX 1003.1c threads component enabled])
AH_TEMPLATE([TK_COMP_POSIX_RT],
   [Comp. POSIX_RT - POSIX 1003.1b queues, semaphores component enabled])

dnl TinKer package tuning defines
AH_TEMPLATE([TK_USE_BUILTIN_SORT],
   [Pack. - Use builtin search/sort function (overrides default for target)])

dnl Build features
AH_TEMPLATE([TK_CPLUSPLUS],
   [If library was built using a C++ compiler])

dnl Other features
AH_TEMPLATE([TK_DISPATCH],
   [Main type of dispatching. MIXED or EXCLUSIVE])


TINKER_CONFIGURE(.)

AC_CONFIG_HEADER(include/tinker/config.h)

sources_c="src/tk.c src/time.c"

dnl Components deduction
if test $enable_itc != no; then
   sources_c="$sources_c src/tk_itc.c src/tk_sysqueues.c"
   if test $enable_builtin_sorting != no; then
      sources_c="$sources_c src/tk_ansi_search.c"
   fi
fi
if test $enable_ptimer != no; then
   sources_c="$sources_c src/tk_ptime.c"
fi
if test $enable_kmem != no; then
   sources_c="$sources_c src/tk_mem.c"
fi
if test $enable_pthread != no; then
   sources_c="$sources_c src/pthread_attr_cond.c src/pthread_attr_mutex.c src/pthread_attr_rwlock.c src/pthread_attr_sched.c src/pthread_cond.c src/pthread_mutex.c src/pthread_rwlock.c src/pthread_sched.c src/pthread_sync.c"
fi
if test $enable_posix_rt != no; then
   sources_c="$sources_c src/semaphore.c src/mqueue.c"
fi


ALL_C=$sources_c
AC_SUBST(ALL_C)

dnl Read Makefile.in and config.h.in, Write Makefile and config.h
AC_OUTPUT(Makefile-gnu)
