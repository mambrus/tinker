						Michael Ambrus  
						Stockholm 2006-10-06
			TINKER

TinKer is a real-time kernel (RTK) for embedded systems. 

RTK'S are commonly referred to as a "RTOS", which is strictly speaking 
incorrect for most embedded "RTOS" out there ;) )

This package includes kernels sources.

You normally build the project locally (don't install). For GNU based 
build-/tool- chains do as follows:

make configure
./configure [<options>]
make

This will build the kernel as a library that you can link your 
application against. Without <options> you will build a native 
library that will execute the kernel in a process on you host 
machine (i.e. a hosted kernel). You can do this if you want to try out 
TinKer without actually run it on a cross target.

To build for a certain host system, set the <options> for configure for 
example as:
 --host=arm-hixs-elf BOARD=lpx21xxx

This will build several libraries in the directory ./lib/ . However, 
only 
the one named ./lib/tinker.a is the one you'll link against (the others 
are intermediate libraries).

Note: that the vendor part is important if you intend to use HIXS. HIXS 
is TinKer main system call interface implementation for GNU newlib.

Tinker will run on targets based on the normal GNU canonical name 
convention.
This would imply a 2 dimensional matrix of targets. Tinger however uses 
the 
vendor part to point out the system (which is normally pointed out by 
the last 
part of the name). This is because the only "system" we care about is 
wether to 
use HIXS or not, and by using the vendor part we don't have to patch 
binutils, 
gcc nor gdb, and focus only on newlib (Newlib is BTW the library in 
question when 
using GNU toolchain, and *not* glibc).

When you build TinKer you'll also have to consider for which hardware to 
run it on. TinKer really doesn't care (or know), but you'll have to name 
the BOARD option when building a cross target. The BOARD option 
cooresponds to a subdirectory in each main target directory.

A GNU target is named following the convention: 
./bsp/gnu_<archetecture> 
(The architecture implies the main architecture, i.e. variants of 
processors following the same architecture all belong to this 
directory.)

And the implementation for a specific board would then subsequently be:
./bsp/gnu_<arch>/<BOARD>

Note that normally only one ABI per main architecture is supported (elf 
preferably).

Any system call variants are considered to be part of each main 
architecture and is not named specifically in the structure (which one 
to use is instead handled by inspecting the tool-chain's canonical name 
vendor part). Most targets will only have one system implementation 
(HIXS) anyway, but ARM for example has two. (As an embedded designer 
you're free to add others for you're own design if you'd like).

The project limit it's ambition to provide *one* board for each main 
target. This is a kernel for embedded systems, and the board adaption is 
part of each specific solution anyway. Hence, the board implementation 
for each target is very basic and not at all complete (that's your job 
;) )

Added to this (now) 4 dimensional matrix, is yet a fifth dimension 
naming the toolchain itself - and implicitly also another standard C 
library. In Tinker's contex, a standard C library is part of a 
tool-chain. The tool-chain will prefix the architecture in the directory 
structure mentioned above. (I.e. all GNU based targets are found in 
directories named ./bsp/gnu_<arch>/<BOARD>, where 'gnu' is the 
tool-chain prefix).

As of writing the following targets are supported
=================================================
GNU tool-chain based:
	ARM TDMI 	(HIXS based)
	ARM TDMI 	(Angel SW based)
	iX86     	(Cygwin, Linux)
	PowerPC		(Work in progress)
	Blackfin	(Work in progress)

Keil tool-chain based
	XC166		(C166 family)

Microsoft Visual studio based
	iX86

Borland (V5) based
	iX86

Obsolete targets (not supported anymore):
=========================================
IAR
	8051
	Z80

(Should interest occur for the obsolete ports, I'll be happy to revive 
them if someone would donate the tools.)


Enjoy!
