OUTFILENAME    = @TINKER_PATH@/lib/lib@PACKAGE_NAME@.a
CC             = @CC@
LD             = @LD@
AS             = @AS@
AR             = @AR@
OBJCOPY        = @OBJCOPY@
OBJDUMP        = @OBJDUMP@
VERSION        = @PACKAGE_VERSION@
CFLAGS         = @CFLAGS@
LDFLAGS        = @LDFLAGS@
LIBS           = @LIBS@
LIBOBJS        = @LIBOBJS@
GCC_PATH       = @GCC_PATH@
CANONICAL_HOST = @CANONICAL_HOST@
ALIAS_HOST     = @host_alias@
XCOMPILE       = @XCOMPILE@
ARCH           = @ARCH@
SYSTEM         = @SYSTEM@
ABI            = @ABI@
TOOLDIR        = @TOOLDIR@
GCC_VERSION    = @GCC_VERSION@
BOARD          = @BOARD@
MAKE_SUBDIRS   = @subdirs@
TINKER_PATH    = @TINKER_PATH@
THIS_DIR       = @THIS_DIR@
CPU_OPT        = @CPU_OPT@
DCPU           = @DCPU@

.PHONY: all subdirs info depend link clean cleanall install rebuild flashit console

MAKE_SUBDIRS_ALL   := $(patsubst %, make -f Makefile-gnu all -C %;, $(MAKE_SUBDIRS))
MAKE_SUBDIRS_CLEAN := $(patsubst %, make -f Makefile-gnu clean -C %;, $(MAKE_SUBDIRS))

SUBLIBS       := $(patsubst %, -l%, @subdirs@)
SUBLIBOUT     := $(patsubst %, @TINKER_PATH@/lib/lib%.a, @subdirs@)

LDFLAGS  := $(LDFLAGS) -L$(TINKER_PATH)/lib $(SUBLIBS)

LIBOBJS_LIST   = $(patsubst %,-l%,$(LIBOBJS))

ifeq ($(XCOMPILE),1)
   CFLAGS := $(CFLAGS)  -DDEBUG -DBOARD=$(BOARD) -DABI=_$(ABI) -DARCH=_$(ARCH) 
   CFLAGS := $(CFLAGS) $(CPU_OPT) $(DCPU) -g -gstabs -D RUN_FROM_ROM
   CFLAGS := $(CFLAGS) -D CHAINPATH=$(TOOLDIR)/$(ALIAS_HOST)/include 
   CFLAGS := $(CFLAGS) -I . -I $(TINKER_PATH)/include 
   
   LDFLAGS   := $(LDFLAGS) -Xlinker --relocatable
   
   LDFLAGS   := $(LDFLAGS) -nodefaultlibs
   LDFLAGS   := $(LDFLAGS) -nostdlib -nostartfiles

else
   CFLAGS   := $(CFLAGS) -no-integrated-cpp -g3 -O0 -DARCH=_$(ARCH) -DDEBUG 
   CFLAGS   := $(CFLAGS) -Wall -I . -I $(TINKER_PATH)/include 
   LDFLAGS  := $(LDFLAGS) -Xlinker --relocatable
   
   #On GCC 3.3.4 (SuSe 9.2) not having this flag will produce a link error to 
   #libgcc_s.a
   LDFLAGS := $(LDFLAGS) -nodefaultlibs
   
   #On GCC 3.3.4 (SuSe 9.2) not having this flag will produce a link error  
   #when linking final application saying multiple symbols (stdlib) are defined
   LDFLAGS := $(LDFLAGS) -nostdlib
endif   

#-------1---------2---------3---------4---------5---------6---------7---------8
ALL_C_r   := @ALL_C@
ALL_ASM_r := @ALL_ASM@
EXTRAS_r  := @EXTRAS@

ALL_C     := $(patsubst %, ${THIS_DIR}/%, ${ALL_C_r})
ALL_ASM   := $(patsubst %, ${THIS_DIR}/%, ${ALL_ASM_r})
EXTRAS    := $(patsubst %, ${THIS_DIR}/%, ${EXTRAS_r})

#-------1---------2---------3---------4---------5---------6---------7---------8

CFLAGS   := $(CFLAGS)                        \
   -DTK_COMP_ITC=1                           \
   -DTK_COMP_PTIMER=0                        \
   -DTK_COMP_KMEM=0                          \
   -DTK_COMP_PTHREAD=0                       \
   -DTK_COMP_POSIX_RT=0
   

ALL_COBJS:=$(patsubst %.c, %.o, $(ALL_C))
ALL_CDEPS:=$(patsubst %.c, %.d, $(ALL_C))

ALL_AOBJS:=$(patsubst %.s, %.ao, $(ALL_ASM))


FOUND_CDEPS:= $(shell find . -name "*.d")
FOUND_OPTMK:= $(shell ls -d *.mk 2>/dev/null)
#-------1---------2---------3---------4---------5---------6---------7---------8

all: subdirs $(ALL_CDEPS) $(ALL_COBJS) $(ALL_AOBJS) $(OUTFILENAME) $(EXTRAS)
	@echo "======================================================"
	@echo "<<- Target [@PACKAGE_NAME@] built! ->>"
	@echo "======================================================"

subdirs:
	$(MAKE_SUBDIRS_ALL)

info:
	@echo "======================================================"
	@echo [$(OUTFILENAME)] " <cc> " $(CC)
	@echo "======================================================"
	@echo $(FOUND_CDEPS)
	@echo "======================================================"
	@echo "======================================================"
	@echo $(ALL_CDEPS)
	@echo "======================================================"
	@echo "======================================================"
	@echo $(ALL_COBJS)
	@echo "======================================================"

clean:
	$(MAKE_SUBDIRS_CLEAN)
	rm -f $(ALL_COBJS) $(ALL_AOBJS) $(ALL_CDEPS) $(OUTFILENAME) $(OUTFILENAME).map $(EXTRAS)
	@echo "======================================================"
	@echo "<<- Target [@PACKAGE_NAME@] cleaned! ->>"
	@echo "======================================================"

cleanall: clean
	rm -rf @TINKER_PATH@/lib/*.ld $(TOOLDIR)/$(ALIAS_HOST)/lib/tinker/
	rm -rf @TINKER_PATH@/lib/crt*.o $(TOOLDIR)/lib/gcc/$(ALIAS_HOST)/$(GCC_VERSION)/tinker/
	rm $(TOOLDIR)/$(ALIAS_HOST)/lib/lib@PACKAGE_NAME@.a
	@echo "======================================================"
	@echo "<<- Target [@PACKAGE_NAME@] installation removed! ->>"
	@echo "======================================================"

install: all
	mkdir -p $(TOOLDIR)/$(ALIAS_HOST)/lib/tinker/
	mkdir -p $(TOOLDIR)/lib/gcc/$(ALIAS_HOST)/$(GCC_VERSION)/tinker/
	cp -dpv $(OUTFILENAME) $(TOOLDIR)/$(ALIAS_HOST)/lib/
	cp -dpv @TINKER_PATH@/lib/*.ld $(TOOLDIR)/$(ALIAS_HOST)/lib/tinker/
	cp -dpv @TINKER_PATH@/lib/crt*.o $(TOOLDIR)/lib/gcc/$(ALIAS_HOST)/$(GCC_VERSION)/tinker/
	@echo "======================================================"
	@echo "<<- Target [@PACKAGE_NAME@] installed! ->>"
	@echo "======================================================"

%.ld:
	@echo =LD========================================================
	cp ${@F} $@

%crt0.o: ${THIS_DIR}/startup_gnu.ao
	@echo =CRT0========================================================
	cp startup_gnu.ao $@

%.d: %.c
	@echo =d2========================================================
	echo $*
	echo $@
	@bash -c 'if [ ! -d ${@D} ]; then echo "-->>>> Creating directory: ${@D}"; mkdir -p ${@D}; fi'
	$(CC) -MM $(CFLAGS) ${@:d=c} > temp
	@sed  -e 's,\(.*\):,$*.o: $@,' > $@ < temp
	@echo

%.o: %.d Makefile-gnu
	@echo =o2========================================================
	$(CC) -c $(CFLAGS) ${@:o=c} -o $@
	@echo

%.ao: %.s Makefile-gnu
	@echo =a2========================================================
	$(CC) -c $(CFLAGS) ${@:ao=s} -o $@
	@echo

$(OUTFILENAME): $(ALL_COBJS) $(ALL_AOBJS) $(SUBLIBOUT)
	@echo =LINK [@PACKAGE_NAME@]====================================
	rm -f $(OUTFILENAME)
	rm -f $(OUTFILENAME).map
	touch $(OUTFILENAME).map
	$(CC) $(CFLAGS) $(LDFLAGS) -DVERSION=\"$(VERSION)\" $(ALL_COBJS) $(ALL_AOBJS) -Xlinker -Map $(OUTFILENAME).map -o $(OUTFILENAME)

ifneq ($(FOUND_OPTMK), )
   include $(FOUND_OPTMK)
endif

ifneq ($(FOUND_CDEPS), )
   include $(FOUND_CDEPS)
endif
