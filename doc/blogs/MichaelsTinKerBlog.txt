/** 
@defgroup BlogMichael Michaels TinKer Blog 
@ingroup BLOGS
@brief A place my thoughts call home...

@subpage MIKEBLOGINTRO "Introduction"

*/

/** 
@page MIKEBLOGINTRO Introduction - Michael's TinKer blog
Here I'll enter all sort of stuff regarding the development of tinker.
Expect:

- Lots of humor :)
- Foul language ]-)
- Maybe some wisdom ;)

*/
//------1---------2---------3---------4---------5---------6---------7---------8
  

/** 
@defgroup Blog051125 051125
@ingroup BlogMichael

@brief Birthday - Man, what a birthday present! TinKer is finally proving it can take the heat!
<HR>


I just got the stumbling first steps of TinKer running with interrupts
working, after being somewhat inspired yesterday. Here is a sample of
how to write code without putting everything in an ISR.

\code
void ASC0_viRx(void) interrupt ASC0_RINT
{

  // USER CODE BEGIN (Rx,2)
  PSW_IEN = 0;
  mybuff[0] = ASC0_uwGetData();
  q_send_ny(Q_ASC0,mybuff); 
  PSW_IEN = 1;

  // USER CODE END

}
\endcode

TinKer defines and pre-creates a couple of queues as system queues,
which allows you to send from an ISR to a normal thread for further
processing like this:

\code
unsigned int task5(void *inpar){
   unsigned long msg_buf[4];
   
   while(1){
      q_receive(Q_ASC0,WAIT,0,msg_buf);
      printf("Task5 received fron stdin: %c\n",msg_buf[0]);
   }
}
\endcode

Do you see the benefit? Almost all time criticality normally attached
with any ISR is taken away. Data (and time itself) is serialized into a
FIFO buffer so that some other piece of code can process it in it's own
pace later. The only thing we have to do, is to create a queue that
contains enough elements to swallow any jittering, and to empty it with
a mean rate that is faster than postings arrive. Time begins to play a
much lesser role now... Naturally real-time still plays a role, but it
takes on another dimension, and it becomes much more formal which means
you can create "schedules" based on "events", "actions" and "timeliness"
(or time criteria).

This technique can be refined and the receiving thread(s) could be just
a first "barrier" that we could call a "device driver". This is b.t.w.
exactly how QNX OS works, all drivers and daemons are just threads (or
light weight processes) not different from any application threads in
the perspective of the kernel.

Another great benefit is that you can easily simulate your hardware,
simply by replacing your "drivers" with other threads that in the
simplest case replay predefined streams of data. Then all of a sudden,
you can start to debug on other targets that are more powerful or has
debuggers or "what-not" that you are more used to.

/Michael

P.s. I still have some stability problems with TinKer and interrupts,
but then again I just got it to run... Several late nights are beginning
to take it's toll on this tired ol' programmer... Goodnight... and...
zzZZzz (snoars) d.s.s

*/

//------1---------2---------3---------4---------5---------6---------7---------8

  
/** 
@defgroup Blog051202_1 051202 (1)
@ingroup BlogMichael

@brief Preemptive at last
<HR>

TinKer is now also working in  full  pre-emptive mode *very happy smile*
:D I'm very soon about to re-establish the port back to x86 (where
TinKer  originally stems from) to be able to validate that the code is
still transparent and portable enough to adress yet many more targets.
And then - go for the  last remainin goals:

- POSIX 1003.1c <b>compatibility</b> (pThreads)
- POSIX 1003.1b <b>compatibility</b> (embedded inter-thread messaging).
- ARM port based on the GNU tool-chain

This will take quite some time, but the first two points are already in
principle working (not following standard POSIX API yet though).
However, I'm, considering going public earlier than I originally thought
because I now aim a little bit higher and I'm going to need (your?) help
. TinKer could in fact become an embryo for not only a kernel, but for a
complete embedded OS. The aspects that remain are:
Ability to load programs that are not pre-built in binary (not to
be confused with a boot-loader, that's something different). This
involves a relocator which can be hard to implement on a target without
virtual addressing (i.e. ability to program the address decoder to
provide the program running with addresses that fit the program but that
are not necessarily the same as the physical addresses).

- A boot loader (hoping  for someone interested in helping out with this
one).
- A file system concept. RAM disk, Flash disk, physical driver (HD)
- A file orientated drivers concept
- A shell with ability to load programs from "devices" and to do so in
"processes"
- A scripting language port - I'm considering Python or TCL - both are
suited for embedding.

Optionally

- TCP/IP stack following BSD standard (same as most OS:es except
Windoze)
- A network disk/device - lightweight version, i.e. not NFS - MOSIX has
something I might port...
 
As you can see the projects could easily become very big and ambitious
and I'm going to be open for accepting help once I go public. Can you
figure out a good name for the next nevel b.t.w.? TinKerOS maybe or TUX
or why not YARTOS ;)

/Michael

Go back to: @ref main
*/

//------1---------2---------3---------4---------5---------6---------7---------8

  
/** 
@defgroup Blog051202_2 051202 (2)
@ingroup BlogMichael

@brief The difference - a code example
<HR>

 
What's pre-emptability anyways?
 
Consider the following code:

\code 
unsigned long cbuff[4];
void ASC0_viRx(void) interrupt ASC0_RINT
{
   cbuff[0] = ASC0_uwGetData();
   q_send_ny(tk_sys_queues[Q_SERIAL_0_I],cbuff);         
}
 
unsigned int thread2(void *inpar){        
   unsigned long msg_buf[4];
   int depth = 0;
 
   printf("Thread 2 started with prio 5\n");
   while (1){
      q_receive(tk_sys_queues[Q_SERIAL_0_I],WAIT,0,msg_buf);
      depth++; 
      printf("Thread2 (%d) received fron stdin: %c\n",depth,msg_buf[0]);
   }
}
 
unsigned int cpu_hog(void *inpar){        
   int depth = 0;
   int k,l,x,y,z;
 
   printf("CPU \"hogg\ started with prio 7\n");
   while (1){
      for (k=0;k<10;k++)
         for (x=0;x<1000;x++)
            for (y=0;y<1000;y++)
               for (z=0;z<1000;z++)
                  l = (((x+y+1)*k)/z) % 10;
    depth++; 
    printf("Hogg completed round: (%d): %d \n",depth,l);
   }
}
 
void root(void){
   clock_t latency = 0;
   
   printf("Hello world o f  TinKer targets\n");
   tk_create_thread("T2",    5,thread2,1,0x600);
   tk_create_thread("HOGG",7,cpu_hog,1,0x600);
 
   printf("Root started\n");
   while (TRUE) {      
      latency = tk_msleep(10000);
      printf("Root \"bling\"!\n");
   }
 
   tk_exit(0); 
} 
\endcode
 
Since we created thread2 before cpu_hog, that thread will actually
execute once, but that's it! Since no yield or sleep is executed in
cpu_hog, that thread will once it's started effectively block execution
from all other threads too - including threads with higher priority!
 
However, in TinKer we can easily create pre-emptive scheduling simply by
calling the function tk_yield_event() in any event triggered function
(like from an ISR as in this example). Simply add the call <b>before you
exit the ISR</b>:

\code
void ASC0_viRx(void) interrupt ASC0_RINT
{
   cbuff[0] = ASC0_uwGetData();
   q_send_ny(tk_sys_queues[Q_SERIAL_0_I],cbuff);         
   tk_yield_event();
}
\endcode
 
Now, whenever an interrupt is received (serial interrupt for XC167 in
this case), thread2 will be awaken and do it's job, assuming it has
priority enough to do so - which as a coincidence it has in our example.
 
This example shows one major drawback with non-pre-emptive scheduling.
It's not that bad as you would think though - and in most cases that
mode works well enough. In fact preemptable kernels have many drawback's
that non-preeptable kernels don't have, so you should carefully consider
if you really need that type of scheduler anyways. TinKer has both
abilities (on certain targets), but it's up you you whether you use one
of the other - <b>YOU HAVE BEEN WARNED THOUGH ;)</b>
 
The sample above has been tested and verified against the text. Give it
a try...
 
Have fun!

/Michael

Go back to: @ref main

*/

//------1---------2---------3---------4---------5---------6---------7---------8

/** 
@defgroup Blog060216 060216
@ingroup BlogMichael

@brief Damned! My \ref COMPONENTS "component" \ref ITC is not
following standard!
<HR>
I implemented ITC a long time ago and I forgot what standard API
it followed. I thought checked it to follow POSIX 1003.1b but that
turned out to be completely wrong. Instead it's pSos API.

It's still a very good API, but it doesn't fit with the TinKer
philosophy. So we need to either redo it, or save it until the pthreads
component is finished (and use the phreads <b>based</B> version of
queues and semaphores.

Here comes a reference to pSos API and error codes:
@see http://dr-linux.net/newbase/reference/psosCD/data/html/5070_002/psc_ch01.htm#583402
@see http://dr-linux.net/newbase/reference/psosCD/data/html/5070_002/psc_appb.htm

Here comes a reference to POSIX 1003.1b queues and semaphore API:

@see http://www.opengroup.org/onlinepubs/007908799/xsh/sem_open.html
@see http://www.opengroup.org/onlinepubs/007908799/xsh/mq_open.html

Good info about types in UNIX (Pascal syntax, but structs are the same):
@see http://www.freepascal.org/docs-html/rtl/unixtype/index-3.html

They do look very similar, and I'm certain of that providing a new
implementation should not be a problem. But it's annoying!

This all begun after I started questioning if the error codes I've
defined was really correct. It turned out that there is not a single
error code in POSIX that starts with ERR_

Since I plan to follow standard on the phreads component I really do not
have a choice put to use the codes defined by ANSI and that are defined
in errno.h (which b.t.w. is not part of an embedded tool-chain either).

Dang!

Go back to: @ref main

*/

//------1---------2---------3---------4---------5---------6---------7---------8

/** 
@defgroup Blog060220 060220
@ingroup BlogMichael

@brief Yay! The POSIX components are hooked in and working

<HR>

This was actually a sort of miss-hap. I didn't intend to implement this
at this time since TinKer itself needs more maturity and proven
stability. But I was rather annoyed about not being able to implement
the \ref PTIMER component using POSIX API that I just had to see if it
would be possible. So we have now the new component: \ref PTHREAD

So I implemented only the necessary functions to be able to compile and
run the code I mentioned before. This code is now part of yet another
component: \ref POSIX_RT

With this in place you can now write the beautiful code below, which is
completely transparent between TinKer, Linux (kernel >= 2.6.8),
Win32-pThreads (i.e. Windows) and several more OSes implementing the
standards.

The only thing you need to do is renaming function \b root to \b main 
and it will compile and run under mentioned OSes.


\code 
#include <stdio.h> 
#include <stdlib.h>
#include <assert.h>  
#include <pthread.h> 
#include <mqueue.h> 

#define QNAME "/My/POSIX/queue.name" 



void *thread2(void *inpar ){ 
   int         loop_cntr            = 0; 
   int         loop_cntr2           = 0; 
   mqd_t       q; 
   int         rc; 
   char        msg_buf[16]; 

   q = mq_open( QNAME, O_WRONLY, 0 ,NULL); 
   if (q==(mqd_t)-1){ 
      assert("Queue opening for writing faliure" == NULL);      
   } 
   
   while (TRUE) {               
      sleep(1); 
      loop_cntr++; 
      if (loop_cntr==250){ 
         loop_cntr2++; 
         loop_cntr = 0; 
         
         msg_buf[0] = loop_cntr2; 
         rc = mq_send(q, msg_buf, sizeof(msg_buf), 5); 
         if (rc==(mqd_t)-1){ 
            assert("Queue writing faliure" == NULL); 
         } 
      } 
   } 
   return 1; 
} 

void *thread3(void *inpar){ 
   char        msg_buf[16]; 
   mqd_t       q; 
   int         rc; 

   q = mq_open( QNAME, O_RDONLY, 0 ,NULL); 
   if (q==(mqd_t)-1){ 
      assert("Queue opening for reading faliure" == NULL); 
   } 

   while (TRUE) {               
      rc = mq_receive(q, msg_buf, sizeof(msg_buf), NULL); 
      if (rc==(mqd_t)-1){ 
         assert("Queue reading faliure\n" == NULL); 
      } 
      printf("Received: %d of length %d\n",msg_buf[0],rc); 
   } 
   return 1; 
} 

void root(void){ 
   pthread_t T2_Thid,T3_Thid; 
   int i; 
   mqd_t q;   
   struct mq_attr qattr = {16,100}; 

   printf("Hello world or TinKer targets\n"); 

   q = mq_open( QNAME, O_CREAT, 0 , &qattr); 
   if (q==(mqd_t)-1){ 
      assert("Queue opening for creation faliure" == NULL); 
   } 

   assert (pthread_create(&T2_Thid, NULL, thread2, 0) == 0); 
   assert (pthread_create(&T3_Thid, NULL, thread3, 0) == 0); 

   printf("Root started\n"); 
   while (TRUE) {      
      sleep(3000); 
   } 

   mq_close(q);   
} 

\endcode

Go back to: @ref main

*/


//------1---------2---------3---------4---------5---------6---------7---------8

/** 
@defgroup Blog060221 060220
@ingroup BlogMichael

@brief CVS log entries

Added a nice feature to the Cygwing generated docs on the net. You are now able
to "browse" based on check-in events. I've been wanting this feature for a long
time, but was to busy and set-up a full-blown view CVS web front-end.

@see CVSLOGX

Besides, as an extra bonus (one that View CVS doesn't have), any identifiers used 
in the code will be automatically referenced by Doxygen.

Go back to: @ref main

*/



//------1---------2---------3---------4---------5---------6---------7---------8

/** 
@defgroup Blog060223 060223
@ingroup BlogMichael

@brief Chasing ghost bugs

I was deeply scared yesterday when I chased something that seemed like a
very nasty bug. The kernel (and test-appl) would run, but hang after a
randomly long time ;(

It turned out to be neither: 

- Preemption ( I checked by turning preemptive features completely off)

- Memory leaks

It turned out to be the Hyper Terminal program in the PC! For some
reason it was configured to use HW handshake and that gave VERY strange
effects:

- The debugger (!) got \e "sluggish" and non responsive when characters
was incoming. This one gave me gray hairs. Without a good HW close
debugger, TinKer is hopeless to develop.

- Sending out from the target worked, but it didn't receive.

After finally straighten that out (gah! *swears loudly*), I decided to
throw HT out for a while and try something else. HT is too lousy and
"flexible" AND it doesn't even enable me to scroll back properly (a very
important for post-mortem analysis when something breakes in the code).

Someone gave me a tip about <em>Tera Term pro</em>. It seems simple and
does just what I need, and nothing else:

http://hp.vector.co.jp/authors/VA002416/teraterm.html

Go back to: @ref main

*/

//------1---------2---------3---------4---------5---------6---------7---------8

/** 
@defgroup Blog060227 060227 
@ingroup BlogMichael

@brief In depth check-in note


Finally tuned the implementation of context switching  (\ref tk_yield
)with the system timer update (\ref GPT1_viTmr2).

I'm not particularly happy about the solution, since it involves turning
off interrupts, when disabling preemptability \b should be enough. This
is due to the "strange" way C166 is behaving during interrupts in
combination with the tool-chain. An interrupt is \b NOT restoring all
what it's done as any normal CPU would do. Instead you're either forced
to do this manually (no way a driver developer will remember this at all
times), or your tool-chain will have to be set-up in a way where extra
code is inserted (what happens if that is forgotten?). In both these
cases, there is a high probability that something goes wrong and neither
is done which will render in an \b occasional bad restoration of a
context. This is both very hard to catch \b AND it breaks my debugger so
that I cant either stop or inspect what goes wrong.

The solution where the context switching takes care of such
eventualities is safer, but more complex than I would have whished for.
Any solution depending on turning interrupts on and off is in my
experience \b very sensitive. It might come to that we'll have a special
implementation for \ref tk_yield exclusively for the C166 community. See
forther references for this \e "strange" behaviour:

@see http://www.keil.com/support/docs/691.htm
@see http://www.keil.com/support/docs/1695.htm
@see http://www.keil.com/support/man/docs/c166/c166_le_extreguse.htm

Note that the last one speaks about R0. I haven't investigate this
further but it might be relevant too, since RO is being used.

Other changes:

- \ref clock will now be able to give its value with as high resolution
as the hardware supports. Implemented as conditional compilation to aid
porting processes. It is furthermore not very likely that this will
improve timekeeping anywhere user specific. However, as a side effect it
avoids a critical time-frame around the last syst-timer period around
each wrapping (i.e. depending on \ref PERT, the last 3-13 mS each 17.2
minuts). Any time-keeping during that time-frame will get accuracy
decimated by up to 2*PERT. Note that this is not the same as the
resolution granularity that happens up to then, since then you at least
know what the precision is. The time-frame in question will give a
"random" precision. This effect has to do with that division between
ULONG_MAX and PERT will leave a fraction for most PERT values above 2
(note that 1 and two doesn't give this effect).

- The test program (test.c) in this check-in is also particularly nasty
since it gives really long latencies on each task switch (up to and
above 500mS!). Test against this if you make any changes in either
timing or dispatching. Even considering this hard case, the drift was as
good as best achieved before (i.e. theoretically possible, 1-2 seconds
per day).

Go back to: @ref main

*/

//------1---------2---------3---------4---------5---------6---------7---------8
